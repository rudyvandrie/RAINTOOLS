"""
            PYTHON 3.xx
            
            py_Rain_TOOLS
            
This Module contains a group of rainfall creation Tools and Utilities that include:

- Australian Rainfall and Runoff (ARR1987) Intensity-Frequency-Duration (IFD) Methods to produce
- A Table
- A Graph
- A Single Value
- The Design Rainfall Pattern Adjusted for Areal Reduction Factor (ARF) and rainfall Losses
It uses basic inputs as follows:
- I02y01hr,I02y12hr,I02y72hr,I50y01hr,I50y12hr,I50y72hr,FreqF02y,FreqF50y,RegSkewG
Functions Used:
                get_32Basic1987_IFD
                get198IFD_1987
                get_singleIFD_1987_Value
                get_ARR1987_PATTERN
                create_IFD_1987_Table
                plot_IFD_1987_Graph
                plot_ARR1987_Pattern
                remove_rainfall_il_cl_loss
+++++   DATA REQUIRED +++++++++++++++++++++++++                
debug = 1
Pattzone = 1    
ArfZone = 1
Location = 'Somewhere in Wollongong'
I87 = [41.40,9.00,2.85,85.50,18.50,6.60,4.28,15.80,0.00]
frq = 500
dur =60
il = 10.	    	
pcl = 2.5  			
icl = 1.5
imp = 0.5			
ATot = 238 # Total Area in sqkm ?
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#---------------- THESE ROUTINES CAN BE CALLED AS SHOWN HERE -----------
Std_Freq_list,Std_Dur_list,ALL_IFD = get198IFD_1987(I87,debug)
#--- ALL_IFD is a list of list INT[Dur][Freq]
# Can now create a table (Save to file ??)
create_IFD_1987_Table(Std_Freq_list,Std_Dur_list,ALL_IFD,Location,debug)
# Or Plot the IFD Graph ..... add real event ???
plot_IFD_1987_Graph(Std_Freq_list,Std_Dur_list,ALL_IFD,Location,debug)
# Here is call to get a single Value:
ARF,AveInt,ARF_AveInt,TotRain = get_singleIFD_1987_Value(I87,ArfZone,frq,dur,ATot,debug)
# get the raw Pattern as Proportions of Total Rain
pattern = get_ARR1987_PATTERN(frq,dur,Pattzone,debug)
# Now get rainfall amounts for Original Pattern Impervious and Pervious
# Plot Pattern that fell from the SKY !!! Original without Losses...?? or ARF ???
ori_pattern,impv_pattern,perv_pattern,Tstep = remove_rainfall_il_cl_loss(dur,pattern,TotRain,imp,il,pcl,icl,debug)
#----PLOT The patterns......
plot_ARR1987_Pattern(ARF,AveInt,ARF_AveInt,TotRain,ATot,Tstep,ori_pattern,impv_pattern,perv_pattern,frq,dur,Pattzone,Location,debug)

                

"""
import math

#-----------------------------------------------------------------------
#            DEFNE FUNCTIONS USED
#-----------------------------------------------------------------------

def get_ARR1987_PATTERN(Freq,duration,zone,debug):
    """
    This retrieves the rainfall pattern for 8 Zones in Australia, for two Frequency Ranges >< 30 years
    This is as per ARR 1987
    
    """
    import numpy as np
    #-----------------------------------------------------------------------
    #         ARR 1987 RAINFALL PATTERNS
    #-----------------------------------------------------------------------
    if debug >0 :print ('In get_ARR1987_PATTERN...')

    if (Freq > 30):
        size = 'greater than 30 yARI'
        large_event = True
        if str(zone) == '1':
            ARR87_LARGE_PATTERNS_ZONE1 = {
                '5':[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '10':[0,0.54,0.46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '15':[0,0.33,0.47,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '20':[0,0.2,0.4,0.3,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '25':[0,0.18,0.26,0.35,0.11,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '30':[0,0.16,0.24,0.3,0.1,0.12,0.08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '45':[0,0.053,0.139,0.233,0.177,0.098,0.117,0.079,0.065,0.039,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '60':[0,0.043,0.073,0.161,0.116,0.217,0.1,0.09,0.06,0.052,0.035,0.03,0.023,0,0,0,0,0,0,0,0,0,0,0,0],
                '90':[0,0.035,0.059,0.139,0.08,0.1,0.195,0.055,0.054,0.045,0.035,0.045,0.036,0.024,0.026,0.026,0.016,0.015,0.015,0,0,0,0,0,0],
                '120':[0,0.024,0.052,0.033,0.049,0.091,0.052,0.167,0.119,0.053,0.033,0.034,0.043,0.043,0.024,0.024,0.034,0.024,0.012,0.012,0.025,0.012,0.013,0.013,0.014],
                '180':[0,0.057,0.168,0.234,0.087,0.118,0.078,0.058,0.067,0.048,0.038,0.028,0.019,0,0,0,0,0,0,0,0,0,0,0,0],
                '270':[0,0.016,0.054,0.098,0.076,0.178,0.129,0.047,0.034,0.068,0.056,0.045,0.037,0.038,0.027,0.038,0.027,0.016,0.016,0,0,0,0,0,0],
                '360':[0,0.041,0.08,0.11,0.233,0.153,0.081,0.07,0.07,0.051,0.061,0.031,0.019,0,0,0,0,0,0,0,0,0,0,0,0],
                '540':[0,0.024,0.063,0.044,0.045,0.034,0.105,0.028,0.047,0.074,0.176,0.131,0.065,0.054,0.035,0.024,0.025,0.013,0.013,0,0,0,0,0,0],
                '720':[0,0.016,0.045,0.035,0.016,0.006,0.026,0.026,0.047,0.036,0.026,0.036,0.07,0.092,0.158,0.035,0.006,0.048,0.113,0.06,0.049,0.016,0.027,0.006,0.005],
                '1080':[0,0.015,0.034,0.024,0.044,0.063,0.063,0.184,0.06,0.129,0.08,0.1,0.054,0.045,0.025,0.035,0.015,0.015,0.015,0,0,0,0,0,0],
                '1440':[0,0.006,0.015,0.015,0.025,0.044,0.015,0.025,0.034,0.035,0.066,0.087,0.158,0.109,0.034,0.044,0.046,0.067,0.056,0.025,0.035,0.025,0.014,0.015,0.005],
                '1800':[0,0.013,0.033,0.043,0.072,0.043,0.153,0.081,0.099,0.224,0.126,0.052,0.023,0.023,0.013,0.002,0,0,0,0,0,0,0,0,0],
                '2160':[0,0.002,0.013,0.025,0.035,0.062,0.051,0.076,0.094,0.213,0.15,0.112,0.045,0.045,0.035,0.013,0.013,0.014,0.002,0,0,0,0,0,0],
                '2880':[0,0.026,0.036,0.026,0.046,0.036,0.066,0.099,0.031,0.13,0.194,0.077,0.046,0.057,0.016,0.017,0.027,0.016,0.006,0.016,0.016,0.004,0.004,0.004,0.004],
                '4320':[0,0.027,0.034,0.06,0.037,0.248,0.079,0.128,0.048,0.099,0.002,0.016,0.002,0.175,0.017,0.007,0.007,0.007,0.007,0,0,0,0,0,0],     
                }
            pattern = np.array(ARR87_LARGE_PATTERNS_ZONE1[str(duration)])
        elif str(zone) == '2':
            ARR87_LARGE_PATTERNS_ZONE2 = {
                '5':[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '10':[0,0.54,0.46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '15':[0,0.33,0.47,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '20':[0,0.2,0.4,0.3,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '25':[0,0.18,0.26,0.35,0.11,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '30':[0,0.16,0.24,0.3,0.1,0.12,0.08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '45':[0,0.053,0.139,0.233,0.177,0.098,0.117,0.079,0.065,0.039,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '60':[0,0.043,0.073,0.161,0.116,0.217,0.1,0.09,0.06,0.052,0.035,0.03,0.023,0,0,0,0,0,0,0,0,0,0,0,0],
                '90':[0,0.044,0.121,0.193,0.077,0.101,0.059,0.075,0.057,0.05,0.038,0.033,0.03,0.028,0.025,0.022,0.02,0.015,0.012,0,0,0,0,0,0],
                '120':[0,0.023,0.06,0.121,0.066,0.163,0.089,0.053,0.051,0.043,0.034,0.043,0.038,0.032,0.028,0.026,0.021,0.021,0.018,0.017,0.015,0.014,0.011,0.009,0.004],
                '180':[0,0.093,0.176,0.279,0.106,0.07,0.061,0.053,0.045,0.038,0.032,0.026,0.021,0,0,0,0,0,0,0,0,0,0,0,0],
                '270':[0,0.053,0.146,0.218,0.092,0.084,0.06,0.06,0.045,0.039,0.035,0.028,0.031,0.023,0.022,0.019,0.017,0.015,0.013,0,0,0,0,0,0],
                '360':[0,0.075,0.284,0.17,0.105,0.095,0.052,0.063,0.045,0.037,0.031,0.023,0.02,0,0,0,0,0,0,0,0,0,0,0,0],
                '540':[0,0.072,0.236,0.138,0.085,0.045,0.036,0.041,0.032,0.023,0.063,0.073,0.054,0.028,0.022,0.015,0.017,0.011,0.009,0,0,0,0,0,0],
                '720':[0,0.073,0.116,0.207,0.079,0.045,0.035,0.057,0.032,0.028,0.026,0.046,0.036,0.039,0.026,0.019,0.025,0.023,0.018,0.016,0.011,0.015,0.01,0.011,0.007],
                '1080':[0,0.158,0.252,0.059,0.072,0.09,0.043,0.117,0.051,0.029,0.016,0.019,0.009,0.035,0.024,0.013,0.007,0.004,0.002,0,0,0,0,0,0],
                '1440':[0,0.096,0.228,0.141,0.069,0.051,0.041,0.065,0.044,0.019,0.034,0.028,0.021,0.025,0.038,0.015,0.017,0.01,0.008,0.014,0.011,0.009,0.007,0.004,0.005],
                '1800':[0,0.177,0.295,0.115,0.069,0.036,0.091,0.057,0.038,0.031,0.026,0.021,0.018,0.012,0.008,0.006,0,0,0,0,0,0,0,0,0],
                '2160':[0,0.162,0.286,0.091,0.079,0.034,0.067,0.048,0.042,0.034,0.029,0.025,0.022,0.016,0.013,0.014,0.013,0.013,0.012,0,0,0,0,0,0],
                '2880':[0,0.148,0.266,0.086,0.054,0.046,0.039,0.045,0.042,0.035,0.03,0.026,0.022,0.014,0.017,0.019,0.013,0.013,0.012,0.014,0.012,0.012,0.012,0.012,0.011],
                '4320':[0,0.163,0.326,0.086,0.064,0.064,0.053,0.041,0.031,0.018,0.026,0.014,0.015,0.022,0.015,0.016,0.014,0.016,0.016,0,0,0,0,0,0],       
                }
            pattern = np.array(ARR87_LARGE_PATTERNS_ZONE2[str(duration)])
        elif str(zone) == '3':
            ARR87_LARGE_PATTERNS_ZONE3 = {
                '5':[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '10':[0,0.54,0.46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '15':[0,0.33,0.47,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '20':[0,0.2,0.4,0.3,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '25':[0,0.18,0.26,0.35,0.11,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '30':[0,0.16,0.24,0.3,0.1,0.12,0.08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '45':[0,0.053,0.139,0.233,0.177,0.098,0.117,0.079,0.065,0.039,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '60':[0,0.043,0.073,0.161,0.116,0.217,0.1,0.09,0.06,0.052,0.035,0.03,0.023,0,0,0,0,0,0,0,0,0,0,0,0],
                '90':[0,0.041,0.068,0.086,0.05,0.117,0.058,0.147,0.099,0.053,0.051,0.047,0.027,0.038,0.034,0.031,0.023,0.018,0.012,0,0,0,0,0,0],
                '120':[0,0.027,0.04,0.06,0.042,0.102,0.042,0.126,0.084,0.07,0.043,0.044,0.04,0.037,0.034,0.031,0.027,0.03,0.028,0.021,0.016,0.02,0.015,0.013,0.008],
                '180':[0,0.042,0.156,0.111,0.214,0.09,0.084,0.073,0.054,0.063,0.047,0.037,0.029,0,0,0,0,0,0,0,0,0,0,0,0],
                '270':[0,0.025,0.096,0.126,0.164,0.069,0.067,0.059,0.039,0.035,0.047,0.053,0.059,0.043,0.032,0.028,0.023,0.019,0.016,0,0,0,0,0,0],
                '360':[0,0.049,0.154,0.228,0.054,0.123,0.09,0.08,0.053,0.062,0.042,0.036,0.029,0,0,0,0,0,0,0,0,0,0,0,0],
                '540':[0,0.087,0.12,0.193,0.04,0.036,0.047,0.062,0.022,0.054,0.031,0.072,0.11,0.032,0.023,0.019,0.015,0.024,0.013,0,0,0,0,0,0],
                '720':[0,0.04,0.086,0.179,0.039,0.064,0.125,0.021,0.02,0.026,0.044,0.033,0.065,0.049,0.03,0.029,0.018,0.018,0.037,0.023,0.014,0.012,0.013,0.009,0.006],
                '1080':[0,0.034,0.215,0.039,0.026,0.045,0.111,0.019,0.012,0.088,0.071,0.022,0.015,0.052,0.148,0.061,0.03,0.008,0.004,0,0,0,0,0,0],
                '1440':[0,0.119,0.195,0.08,0.068,0.05,0.029,0.008,0.021,0.032,0.011,0.015,0.012,0.036,0.045,0.041,0.023,0.013,0.06,0.081,0.018,0.026,0.007,0.006,0.004],
                '1800':[0,0.019,0.253,0.042,0.051,0.011,0.036,0.015,0.023,0.029,0.093,0.075,0.161,0.12,0.064,0.008,0,0,0,0,0,0,0,0,0],
                '2160':[0,0.233,0.061,0.072,0.022,0.037,0.031,0.014,0.009,0.013,0.026,0.008,0.017,0.05,0.153,0.116,0.09,0.043,0.005,0,0,0,0,0,0],
                '2880':[0,0.198,0.105,0.061,0.008,0.013,0.009,0.007,0.011,0.016,0.045,0.07,0.025,0.029,0.022,0.086,0.11,0.052,0.018,0.039,0.015,0.013,0.035,0.007,0.006],
                '4320':[0,0.258,0.047,0.017,0.007,0.013,0.026,0.12,0.17,0.06,0.031,0.01,0.021,0.075,0.094,0.038,0.005,0.005,0.003,0,0,0,0,0,0],            
                }
            pattern = np.array(ARR87_LARGE_PATTERNS_ZONE3[str(duration)])
        elif str(zone) == '4':
            ARR87_LARGE_PATTERNS_ZONE4 = {
                '5':[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '10':[0,0.54,0.46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '15':[0,0.33,0.47,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '20':[0,0.2,0.4,0.3,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '25':[0,0.18,0.26,0.35,0.11,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '30':[0,0.16,0.24,0.3,0.1,0.12,0.08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '45':[0,0.053,0.139,0.233,0.177,0.098,0.117,0.079,0.065,0.039,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '60':[0,0.043,0.073,0.161,0.116,0.217,0.1,0.09,0.06,0.052,0.035,0.03,0.023,0,0,0,0,0,0,0,0,0,0,0,0],
                '90':[0,0.028,0.088,0.127,0.098,0.109,0.082,0.066,0.071,0.057,0.052,0.046,0.041,0.033,0.037,0.022,0.018,0.015,0.01,0,0,0,0,0,0],
                '120':[0,0.025,0.049,0.099,0.116,0.081,0.089,0.068,0.051,0.057,0.045,0.045,0.042,0.035,0.038,0.03,0.029,0.022,0.02,0.019,0.014,0.01,0.012,0.003,0.001],
                '180':[0,0.055,0.179,0.223,0.135,0.102,0.084,0.068,0.045,0.036,0.031,0.024,0.018,0,0,0,0,0,0,0,0,0,0,0,0],
                '270':[0,0.045,0.092,0.146,0.19,0.117,0.063,0.066,0.055,0.039,0.034,0.028,0.025,0.022,0.018,0.017,0.016,0.015,0.012,0,0,0,0,0,0],
                '360':[0,0.124,0.259,0.191,0.089,0.077,0.061,0.051,0.042,0.035,0.03,0.023,0.018,0,0,0,0,0,0,0,0,0,0,0,0],
                '540':[0,0.086,0.233,0.159,0.073,0.047,0.062,0.049,0.045,0.04,0.035,0.032,0.026,0.029,0.022,0.02,0.015,0.014,0.013,0,0,0,0,0,0],
                '720':[0,0.095,0.223,0.097,0.067,0.044,0.034,0.028,0.06,0.037,0.033,0.031,0.026,0.028,0.028,0.024,0.022,0.019,0.019,0.018,0.016,0.017,0.004,0.018,0.012],
                '1080':[0,0.264,0.166,0.054,0.099,0.056,0.051,0.048,0.032,0.024,0.027,0.021,0.019,0.04,0.02,0.019,0.022,0.02,0.018,0,0,0,0,0,0],
                '1440':[0,0.236,0.141,0.067,0.053,0.038,0.034,0.035,0.025,0.021,0.019,0.02,0.016,0.007,0.003,0.017,0.024,0.021,0.022,0.028,0.033,0.029,0.04,0.044,0.027],
                '1800':[0,0.291,0.147,0.074,0.049,0.028,0.02,0.019,0.021,0.021,0.031,0.035,0.041,0.075,0.089,0.059,0,0,0,0,0,0,0,0,0],
                '2160':[0,0.267,0.129,0.054,0.05,0.032,0.018,0.019,0.018,0.019,0.023,0.029,0.026,0.052,0.072,0.09,0.043,0.038,0.021,0,0,0,0,0,0],
                '2880':[0,0.236,0.103,0.042,0.024,0.014,0.015,0.013,0.016,0.006,0.022,0.046,0.022,0.053,0.069,0.085,0.033,0.018,0.017,0.015,0.017,0.026,0.037,0.042,0.029],
                '4320':[0,0.258,0.096,0.017,0.016,0.017,0.039,0.096,0.075,0.021,0.018,0.023,0.049,0.114,0.061,0.019,0.021,0.034,0.026,0,0,0,0,0,0],           
                }
            pattern = np.array(ARR87_LARGE_PATTERNS_ZONE4[str(duration)])
        elif str(zone) == '5':
            ARR87_LARGE_PATTERNS_ZONE5 = {
                '5':[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '10':[0,0.54,0.46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '15':[0,0.33,0.47,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '20':[0,0.2,0.4,0.3,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '25':[0,0.18,0.26,0.35,0.11,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '30':[0,0.16,0.24,0.3,0.1,0.12,0.08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '45':[0,0.053,0.139,0.233,0.177,0.098,0.117,0.079,0.065,0.039,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '60':[0,0.043,0.073,0.161,0.116,0.217,0.1,0.09,0.06,0.052,0.035,0.03,0.023,0,0,0,0,0,0,0,0,0,0,0,0],
                '90':[0,0.073,0.105,0.164,0.093,0.084,0.064,0.057,0.052,0.047,0.039,0.042,0.034,0.025,0.019,0.022,0.038,0.029,0.013,0,0,0,0,0,0],
                '120':[0,0.037,0.063,0.104,0.122,0.087,0.072,0.059,0.053,0.053,0.048,0.045,0.04,0.038,0.031,0.033,0.021,0.021,0.027,0.015,0.009,0.013,0.007,0.001,0.001],
                '180':[0,0.089,0.236,0.174,0.124,0.079,0.068,0.058,0.05,0.041,0.034,0.028,0.019,0,0,0,0,0,0,0,0,0,0,0,0],
                '270':[0,0.062,0.18,0.137,0.106,0.082,0.045,0.054,0.073,0.043,0.034,0.031,0.038,0.03,0.026,0.021,0.016,0.013,0.009,0,0,0,0,0,0],
                '360':[0,0.106,0.261,0.169,0.089,0.08,0.067,0.056,0.047,0.036,0.041,0.026,0.022,0,0,0,0,0,0,0,0,0,0,0,0],
                '540':[0,0.12,0.236,0.078,0.07,0.066,0.06,0.057,0.052,0.047,0.029,0.025,0.037,0.036,0.044,0.014,0.011,0.011,0.007,0,0,0,0,0,0],
                '720':[0,0.095,0.211,0.065,0.044,0.064,0.044,0.047,0.044,0.04,0.037,0.03,0.033,0.024,0.029,0.019,0.027,0.017,0.018,0.027,0.015,0.016,0.017,0.018,0.019],
                '1080':[0,0.255,0.122,0.079,0.071,0.061,0.058,0.046,0.053,0.042,0.035,0.037,0.03,0.03,0.026,0.021,0.016,0.01,0.008,0,0,0,0,0,0],
                '1440':[0,0.239,0.114,0.039,0.093,0.056,0.047,0.045,0.037,0.035,0.027,0.03,0.026,0.022,0.022,0.016,0.011,0.019,0.021,0.018,0.012,0.017,0.017,0.018,0.019],
                '1800':[0,0.3,0.158,0.1,0.072,0.067,0.06,0.05,0.042,0.035,0.028,0.023,0.02,0.015,0.016,0.014,0,0,0,0,0,0,0,0,0],
                '2160':[0,0.28,0.135,0.079,0.07,0.055,0.048,0.045,0.037,0.027,0.031,0.022,0.022,0.023,0.025,0.024,0.026,0.025,0.026,0,0,0,0,0,0],
                '2880':[0,0.251,0.106,0.064,0.06,0.05,0.054,0.044,0.038,0.03,0.026,0.02,0.021,0.018,0.015,0.016,0.017,0.019,0.02,0.021,0.02,0.021,0.022,0.023,0.024],
                '4320':[0,0.313,0.117,0.08,0.066,0.064,0.049,0.037,0.026,0.031,0.023,0.02,0.02,0.023,0.024,0.025,0.027,0.028,0.027,0,0,0,0,0,0],           
                }
            pattern = np.array(ARR87_LARGE_PATTERNS_ZONE5[str(duration)])     
        elif str(zone) == '6':
            ARR87_LARGE_PATTERNS_ZONE6 = {
                '5':[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '10':[0,0.54,0.46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '15':[0,0.33,0.47,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '20':[0,0.2,0.4,0.3,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '25':[0,0.18,0.26,0.35,0.11,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '30':[0,0.16,0.24,0.3,0.1,0.12,0.08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '45':[0,0.053,0.139,0.233,0.177,0.098,0.117,0.079,0.065,0.039,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '60':[0,0.043,0.073,0.161,0.116,0.217,0.1,0.09,0.06,0.052,0.035,0.03,0.023,0,0,0,0,0,0,0,0,0,0,0,0],
                '90':[0,0.032,0.035,0.051,0.071,0.193,0.087,0.11,0.143,0.059,0.028,0.04,0.046,0.024,0.014,0.017,0.022,0.019,0.009,0,0,0,0,0,0],
                '120':[0,0.018,0.123,0.161,0.057,0.034,0.098,0.068,0.083,0.049,0.027,0.031,0.039,0.044,0.026,0.02,0.023,0.015,0.021,0.017,0.013,0.011,0.01,0.007,0.005],
                '180':[0,0.061,0.269,0.18,0.126,0.095,0.075,0.05,0.043,0.035,0.029,0.022,0.015,0,0,0,0,0,0,0,0,0,0,0,0],
                '270':[0,0.019,0.148,0.214,0.051,0.109,0.086,0.07,0.039,0.045,0.059,0.034,0.022,0.029,0.025,0.016,0.014,0.011,0.009,0,0,0,0,0,0],
                '360':[0,0.043,0.078,0.269,0.172,0.125,0.098,0.064,0.052,0.036,0.028,0.021,0.014,0,0,0,0,0,0,0,0,0,0,0,0],
                '540':[0,0.06,0.255,0.047,0.158,0.108,0.082,0.047,0.039,0.027,0.019,0.037,0.015,0.023,0.032,0.013,0.017,0.012,0.009,0,0,0,0,0,0],
                '720':[0,0.073,0.232,0.026,0.147,0.1,0.058,0.044,0.046,0.038,0.028,0.024,0.017,0.021,0.033,0.019,0.016,0.014,0.013,0.01,0.011,0.008,0.007,0.009,0.006],
                '1080':[0,0.067,0.258,0.12,0.16,0.032,0.022,0.091,0.043,0.053,0.03,0.024,0.02,0.016,0.017,0.015,0.012,0.011,0.009,0,0,0,0,0,0],
                '1440':[0,0.112,0.239,0.087,0.15,0.053,0.067,0.043,0.038,0.036,0.03,0.021,0.018,0.025,0.016,0.009,0.014,0.012,0.008,0.006,0.005,0.005,0,0.002,0.004],
                '1800':[0,0.133,0.304,0.185,0.073,0.097,0.054,0.042,0.024,0.032,0.018,0.013,0.01,0.007,0.005,0.003,0,0,0,0,0,0,0,0,0],
                '2160':[0,0.121,0.291,0.177,0.089,0.063,0.041,0.053,0.035,0.027,0.022,0.017,0.013,0.01,0.012,0.008,0.009,0.007,0.005,0,0,0,0,0,0],
                '2880':[0,0.158,0.27,0.111,0.075,0.058,0.051,0.031,0.048,0.038,0.026,0.021,0.012,0.018,0.015,0.009,0.011,0.01,0.007,0.007,0.006,0.004,0.003,0.005,0.006],
                '4320':[0,0.182,0.336,0.121,0.08,0.06,0.039,0.05,0.03,0.017,0.023,0.009,0.014,0.011,0.007,0.007,0.003,0.007,0.004,0,0,0,0,0,0],         
                }
            pattern = np.array(ARR87_LARGE_PATTERNS_ZONE6[str(duration)])     
        elif str(zone) == '7':
            ARR87_LARGE_PATTERNS_ZONE7 = {
                '5':[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '10':[0,0.54,0.46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '15':[0,0.33,0.47,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '20':[0,0.2,0.4,0.3,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '25':[0,0.18,0.26,0.35,0.11,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '30':[0,0.16,0.24,0.3,0.1,0.12,0.08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '45':[0,0.053,0.139,0.233,0.177,0.098,0.117,0.079,0.065,0.039,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '60':[0,0.043,0.073,0.161,0.116,0.217,0.1,0.09,0.06,0.052,0.035,0.03,0.023,0,0,0,0,0,0,0,0,0,0,0,0],
                '90':[0,0.06,0.117,0.135,0.1,0.059,0.094,0.074,0.04,0.045,0.054,0.049,0.036,0.024,0.017,0.028,0.024,0.033,0.011,0,0,0,0,0,0],
                '120':[0,0,0.042,0.098,0.119,0.075,0.041,0.056,0.082,0.042,0.041,0.041,0.042,0.038,0.038,0.035,0.013,0.021,0.031,0.029,0.017,0.01,0.029,0.033,0.023,0.004],
                '180':[0,0.044,0.163,0.213,0.123,0.096,0.072,0.037,0.06,0.086,0.052,0.031,0.023,0,0,0,0,0,0,0,0,0,0,0,0],
                '270':[0,0.05,0.131,0.183,0.084,0.064,0.054,0.051,0.051,0.046,0.041,0.038,0.037,0.033,0.032,0.028,0.028,0.026,0.023,0,0,0,0,0,0],
                '360':[0,0.087,0.236,0.119,0.164,0.081,0.043,0.031,0.038,0.058,0.069,0.051,0.023,0,0,0,0,0,0,0,0,0,0,0,0],
                '540':[0,0.041,0.197,0.087,0.049,0.032,0.042,0.117,0.071,0.086,0.058,0.033,0.032,0.031,0.019,0.026,0.023,0.03,0.026,0,0,0,0,0,0],
                '720':[0,0.036,0.183,0.124,0.038,0.027,0.014,0.031,0.048,0.102,0.077,0.061,0.032,0.029,0.028,0.023,0.027,0.019,0.02,0.023,0.015,0.014,0.007,0.016,0.006],
                '1080':[0,0.138,0.258,0.077,0.039,0.105,0.064,0.042,0.03,0.04,0.026,0.02,0.034,0.023,0.021,0.021,0.023,0.02,0.019,0,0,0,0,0,0],
                '1440':[0,0.125,0.246,0.058,0.087,0.064,0.056,0.046,0.025,0.03,0.04,0.023,0.006,0.003,0.02,0.033,0.021,0.019,0.003,0.005,0.018,0.012,0.02,0.036,0.004],
                '1800':[0,0.315,0.069,0.159,0.071,0.07,0.045,0.032,0.025,0.039,0.028,0.034,0.055,0.021,0.019,0.018,0,0,0,0,0,0,0,0,0],
                '2160':[0,0.307,0.06,0.148,0.063,0.05,0.043,0.029,0.051,0.037,0.027,0.024,0.032,0.024,0.021,0.021,0.02,0.021,0.022,0,0,0,0,0,0],
                '2880':[0,0.276,0.098,0.053,0.053,0.04,0.043,0.043,0.026,0.03,0.024,0.02,0.036,0.022,0.019,0.02,0.021,0.022,0.024,0.011,0.022,0.024,0.024,0.024,0.025],
                '4320':[0,0.325,0.11,0.075,0.055,0.073,0.047,0.037,0.023,0.024,0.025,0.026,0.03,0.027,0.021,0.024,0.025,0.027,0.026,0,0,0,0,0,0],       
                }
            pattern = np.array(ARR87_LARGE_PATTERNS_ZONE7[str(duration)])   
        elif str(zone) == '8':
            ARR87_LARGE_PATTERNS_ZONE8 = {
                '5':[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '10':[0,0.54,0.46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '15':[0,0.33,0.47,0.2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '20':[0,0.2,0.4,0.3,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '25':[0,0.18,0.26,0.35,0.11,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '30':[0,0.16,0.24,0.3,0.1,0.12,0.08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '45':[0,0.053,0.139,0.233,0.177,0.098,0.117,0.079,0.065,0.039,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '60':[0,0.043,0.073,0.161,0.116,0.217,0.1,0.09,0.06,0.052,0.035,0.03,0.023,0,0,0,0,0,0,0,0,0,0,0,0],
                '90':[0,0.058,0.148,0.114,0.096,0.071,0.064,0.083,0.034,0.044,0.047,0.039,0.036,0.053,0.024,0.02,0.029,0.028,0.012,0,0,0,0,0,0],
                '120':[0,0.021,0.132,0.099,0.071,0.055,0.061,0.082,0.049,0.03,0.026,0.036,0.035,0.026,0.021,0.031,0.034,0.042,0.04,0.045,0.024,0.016,0.012,0.008,0.004],
                '180':[0,0.119,0.242,0.161,0.059,0.068,0.093,0.079,0.051,0.037,0.042,0.029,0.02,0,0,0,0,0,0,0,0,0,0,0,0],
                '270':[0,0.064,0.183,0.1,0.082,0.121,0.041,0.034,0.053,0.061,0.044,0.035,0.015,0.02,0.027,0.032,0.053,0.023,0.012,0,0,0,0,0,0],
                '360':[0,0.091,0.161,0.054,0.253,0.12,0.069,0.053,0.061,0.046,0.035,0.031,0.026,0,0,0,0,0,0,0,0,0,0,0,0],
                '540':[0,0.126,0.082,0.237,0.05,0.068,0.062,0.052,0.05,0.046,0.032,0.028,0.023,0.039,0.017,0.021,0.036,0.016,0.015,0,0,0,0,0,0],
                '720':[0,0.114,0.216,0.073,0.044,0.06,0.052,0.046,0.048,0.042,0.023,0.025,0.021,0.036,0.033,0.029,0.027,0.019,0.016,0.007,0.018,0.017,0.012,0.013,0.009],
                '1080':[0,0.131,0.228,0.092,0.044,0.084,0.033,0.073,0.059,0.034,0.037,0.049,0.029,0.023,0.026,0.019,0.014,0.014,0.011,0,0,0,0,0,0],
                '1440':[0,0.116,0.212,0.074,0.064,0.048,0.067,0.04,0.056,0.037,0.041,0.033,0.029,0.026,0.023,0.021,0.019,0.016,0.011,0.015,0.005,0.009,0.016,0.01,0.012],
                '1800':[0,0.099,0.251,0.147,0.079,0.071,0.056,0.069,0.047,0.02,0.025,0.034,0.017,0.029,0.041,0.015,0,0,0,0,0,0,0,0,0],
                '2160':[0,0.129,0.093,0.234,0.07,0.061,0.058,0.046,0.053,0.026,0.017,0.029,0.034,0.044,0.038,0.018,0.013,0.023,0.014,0,0,0,0,0,0],
                '2880':[0,0.117,0.228,0.073,0.057,0.057,0.053,0.05,0.039,0.016,0.017,0.027,0.019,0.014,0.045,0.021,0.03,0.015,0.025,0.012,0.033,0.012,0.013,0.013,0.014],
                '4320':[0,0.27,0.144,0.095,0.075,0.059,0.071,0.035,0.05,0.021,0.025,0.029,0.009,0.014,0.012,0.014,0.042,0.019,0.016,0,0,0,0,0,0],    
                }
            pattern = np.array(ARR87_LARGE_PATTERNS_ZONE8[str(duration)])    
        #----End if Zone----
    else:
        size = 'less than 30 yARI'
        large_event = False
        if str(zone) == '1':
            ARR87_SMALL_PATTERNS_ZONE1 = {
                '5':[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '10':[0,0.57,0.43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '15':[0,0.32,0.5,0.18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '20':[0,0.19,0.43,0.3,0.08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '25':[0,0.17,0.28,0.39,0.09,0.07,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '30':[0,0.16,0.25,0.33,0.09,0.11,0.06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '45':[0,0.048,0.142,0.247,0.183,0.095,0.116,0.075,0.061,0.033,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '60':[0,0.039,0.07,0.168,0.12,0.232,0.101,0.089,0.057,0.048,0.031,0.026,0.019,0,0,0,0,0,0,0,0,0,0,0,0],
                '90':[0,0.032,0.059,0.146,0.082,0.104,0.21,0.054,0.053,0.044,0.031,0.043,0.034,0.021,0.024,0.022,0.013,0.015,0.013,0,0,0,0,0,0],
                '120':[0,0.022,0.053,0.031,0.049,0.096,0.052,0.18,0.124,0.056,0.031,0.033,0.042,0.043,0.021,0.022,0.034,0.019,0.012,0.01,0.023,0.009,0.013,0.011,0.014],
                '180':[0,0.053,0.176,0.251,0.087,0.121,0.076,0.055,0.064,0.043,0.035,0.024,0.015,0,0,0,0,0,0,0,0,0,0,0,0],
                '270':[0,0.015,0.053,0.102,0.078,0.191,0.136,0.045,0.031,0.068,0.055,0.043,0.034,0.036,0.025,0.035,0.024,0.015,0.014,0,0,0,0,0,0],
                '360':[0,0.036,0.078,0.114,0.25,0.16,0.082,0.067,0.067,0.047,0.057,0.027,0.015,0,0,0,0,0,0,0,0,0,0,0,0],
                '540':[0,0.022,0.062,0.041,0.043,0.031,0.109,0.025,0.045,0.076,0.189,0.138,0.065,0.053,0.032,0.021,0.024,0.011,0.013,0,0,0,0,0,0],
                '720':[0,0.014,0.044,0.033,0.015,0.005,0.024,0.023,0.046,0.035,0.023,0.034,0.071,0.096,0.17,0.033,0.006,0.048,0.119,0.061,0.05,0.014,0.025,0.006,0.005],
                '1080':[0,0.014,0.03,0.022,0.041,0.063,0.062,0.198,0.059,0.136,0.082,0.104,0.052,0.043,0.023,0.032,0.014,0.012,0.013,0,0,0,0,0,0],
                '1440':[0,0.006,0.013,0.015,0.023,0.042,0.014,0.023,0.032,0.034,0.067,0.092,0.17,0.115,0.032,0.043,0.046,0.069,0.056,0.023,0.033,0.022,0.013,0.012,0.005],
                '1800':[0,0.01,0.028,0.042,0.07,0.038,0.162,0.079,0.101,0.24,0.131,0.049,0.021,0.019,0.009,0.001,0,0,0,0,0,0,0,0,0],
                '2160':[0,0.001,0.011,0.022,0.032,0.061,0.049,0.076,0.096,0.229,0.158,0.117,0.041,0.043,0.031,0.011,0.009,0.012,0.001,0,0,0,0,0,0],
                '2880':[0,0.023,0.034,0.023,0.045,0.034,0.066,0.103,0.029,0.137,0.209,0.079,0.044,0.056,0.014,0.015,0.025,0.014,0.007,0.013,0.015,0.003,0.004,0.005,0.003],
                '4320':[0,0.024,0.031,0.058,0.035,0.266,0.078,0.132,0.046,0.098,0.002,0.014,0.003,0.182,0.013,0.004,0.004,0.005,0.005,0,0,0,0,0,0],      
                }
            pattern = np.array(ARR87_SMALL_PATTERNS_ZONE1[str(duration)])
        elif str(zone) == '2':
            ARR87_SMALL_PATTERNS_ZONE2 = {
                '5':[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '10':[0,0.57,0.43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '15':[0,0.32,0.5,0.18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '20':[0,0.19,0.43,0.3,0.08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '25':[0,0.17,0.28,0.39,0.09,0.07,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '30':[0,0.16,0.25,0.33,0.09,0.11,0.06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '45':[0,0.048,0.142,0.247,0.183,0.095,0.116,0.075,0.061,0.033,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '60':[0,0.039,0.07,0.168,0.12,0.232,0.101,0.089,0.057,0.048,0.031,0.026,0.019,0,0,0,0,0,0,0,0,0,0,0,0],
                '90':[0,0.041,0.13,0.212,0.078,0.105,0.058,0.074,0.055,0.047,0.035,0.03,0.027,0.025,0.022,0.019,0.017,0.014,0.011,0,0,0,0,0,0],
                '120':[0,0.021,0.061,0.129,0.068,0.179,0.094,0.053,0.05,0.042,0.032,0.041,0.036,0.029,0.026,0.023,0.019,0.018,0.016,0.015,0.013,0.012,0.01,0.008,0.005],
                '180':[0,0.092,0.185,0.303,0.108,0.067,0.058,0.049,0.04,0.033,0.027,0.021,0.017,0,0,0,0,0,0,0,0,0,0,0,0],
                '270':[0,0.05,0.155,0.238,0.095,0.084,0.058,0.059,0.043,0.037,0.032,0.025,0.028,0.021,0.019,0.017,0.015,0.013,0.011,0,0,0,0,0,0],
                '360':[0,0.072,0.309,0.179,0.107,0.094,0.047,0.059,0.04,0.032,0.026,0.019,0.016,0,0,0,0,0,0,0,0,0,0,0,0],
                '540':[0,0.072,0.258,0.146,0.088,0.043,0.033,0.038,0.029,0.021,0.06,0.071,0.051,0.025,0.019,0.013,0.015,0.01,0.008,0,0,0,0,0,0],
                '720':[0,0.074,0.124,0.227,0.083,0.044,0.034,0.057,0.03,0.026,0.023,0.044,0.034,0.038,0.024,0.017,0.022,0.02,0.016,0.014,0.01,0.013,0.009,0.01,0.007],
                '1080':[0,0.166,0.274,0.056,0.069,0.089,0.039,0.119,0.047,0.026,0.014,0.017,0.008,0.032,0.021,0.011,0.006,0.004,0.002,0,0,0,0,0,0],
                '1440':[0,0.099,0.249,0.149,0.069,0.049,0.039,0.063,0.042,0.017,0.031,0.026,0.019,0.023,0.036,0.013,0.015,0.009,0.007,0.012,0.01,0.008,0.006,0.004,0.005],
                '1800':[0,0.186,0.321,0.117,0.066,0.032,0.09,0.054,0.035,0.027,0.022,0.017,0.014,0.009,0.006,0.004,0,0,0,0,0,0,0,0,0],
                '2160':[0,0.171,0.311,0.093,0.078,0.031,0.064,0.045,0.039,0.032,0.026,0.022,0.019,0.014,0.011,0.012,0.011,0.011,0.01,0,0,0,0,0,0],
                '2880':[0,0.157,0.29,0.089,0.054,0.045,0.037,0.043,0.041,0.033,0.028,0.024,0.02,0.013,0.015,0.017,0.012,0.011,0.01,0.012,0.01,0.01,0.01,0.01,0.009],
                '4320':[0,0.172,0.354,0.088,0.063,0.062,0.05,0.038,0.028,0.015,0.023,0.013,0.013,0.019,0.013,0.013,0.012,0.012,0.012,0,0,0,0,0,0],
                }
            pattern = np.array(ARR87_SMALL_PATTERNS_ZONE2[str(duration)])
        elif str(zone) == '3':
            ARR87_SMALL_PATTERNS_ZONE3 = {        
                '5':[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '10':[0,0.57,0.43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '15':[0,0.32,0.5,0.18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '20':[0,0.19,0.43,0.3,0.08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '25':[0,0.17,0.28,0.39,0.09,0.07,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '30':[0,0.16,0.25,0.33,0.09,0.11,0.06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '45':[0,0.048,0.142,0.247,0.183,0.095,0.116,0.075,0.061,0.033,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '60':[0,0.039,0.07,0.168,0.12,0.232,0.101,0.089,0.057,0.048,0.031,0.026,0.019,0,0,0,0,0,0,0,0,0,0,0,0],
                '90':[0,0.038,0.069,0.088,0.046,0.128,0.057,0.167,0.104,0.051,0.048,0.043,0.023,0.034,0.03,0.027,0.02,0.016,0.011,0,0,0,0,0,0],
                '120':[0,0.023,0.038,0.062,0.042,0.113,0.043,0.145,0.09,0.073,0.044,0.042,0.038,0.034,0.031,0.028,0.024,0.026,0.023,0.018,0.014,0.017,0.013,0.011,0.008],
                '180':[0,0.036,0.168,0.114,0.241,0.09,0.081,0.069,0.048,0.058,0.041,0.031,0.023,0,0,0,0,0,0,0,0,0,0,0,0],
                '270':[0,0.021,0.101,0.138,0.187,0.071,0.068,0.058,0.035,0.031,0.044,0.05,0.057,0.039,0.028,0.024,0.019,0.016,0.013,0,0,0,0,0,0],
                '360':[0,0.043,0.165,0.256,0.048,0.126,0.089,0.077,0.049,0.058,0.036,0.03,0.023,0,0,0,0,0,0,0,0,0,0,0,0],
                '540':[0,0.088,0.13,0.218,0.037,0.032,0.044,0.06,0.019,0.051,0.027,0.072,0.114,0.028,0.019,0.016,0.013,0.021,0.011,0,0,0,0,0,0],
                '720':[0,0.038,0.091,0.203,0.037,0.066,0.137,0.018,0.017,0.022,0.043,0.03,0.066,0.049,0.027,0.025,0.015,0.015,0.034,0.02,0.012,0.01,0.011,0.008,0.006],
                '1080':[0,0.03,0.242,0.035,0.022,0.041,0.114,0.015,0.01,0.088,0.07,0.018,0.012,0.049,0.159,0.058,0.026,0.007,0.004,0,0,0,0,0,0],
                '1440':[0,0.129,0.22,0.081,0.068,0.049,0.026,0.007,0.018,0.029,0.009,0.013,0.01,0.033,0.043,0.038,0.02,0.011,0.058,0.085,0.015,0.023,0.006,0.005,0.004],
                '1800':[0,0.015,0.283,0.037,0.047,0.008,0.031,0.011,0.019,0.024,0.092,0.073,0.172,0.123,0.06,0.005,0,0,0,0,0,0,0,0,0],
                '2160':[0,0.262,0.058,0.071,0.018,0.033,0.027,0.011,0.006,0.009,0.022,0.005,0.014,0.047,0.165,0.12,0.09,0.039,0.003,0,0,0,0,0,0],
                '2880':[0,0.224,0.114,0.059,0.007,0.011,0.008,0.006,0.009,0.014,0.042,0.07,0.022,0.026,0.019,0.087,0.114,0.05,0.016,0.036,0.013,0.011,0.031,0.006,0.005],
                '4320':[0,0.289,0.043,0.013,0.005,0.01,0.022,0.123,0.182,0.056,0.027,0.007,0.017,0.073,0.093,0.034,0.003,0.002,0.001,0,0,0,0,0,0],
                }   
            pattern = np.array(ARR87_SMALL_PATTERNS_ZONE3[str(duration)])  
        elif str(zone) == '4':
            ARR87_SMALL_PATTERNS_ZONE4 = {        
                '5':[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '10':[0,0.57,0.43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '15':[0,0.32,0.5,0.18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '20':[0,0.19,0.43,0.3,0.08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '25':[0,0.17,0.28,0.39,0.09,0.07,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '30':[0,0.16,0.25,0.33,0.09,0.11,0.06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '45':[0,0.048,0.142,0.247,0.183,0.095,0.116,0.075,0.061,0.033,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '60':[0,0.039,0.07,0.168,0.12,0.232,0.101,0.089,0.057,0.048,0.031,0.026,0.019,0,0,0,0,0,0,0,0,0,0,0,0],
                '90':[0,0.021,0.091,0.169,0.109,0.131,0.08,0.06,0.068,0.05,0.044,0.038,0.033,0.025,0.029,0.017,0.014,0.012,0.009,0,0,0,0,0,0],
                '120':[0,0.018,0.045,0.122,0.157,0.087,0.102,0.07,0.049,0.057,0.04,0.038,0.034,0.027,0.03,0.023,0.021,0.016,0.014,0.013,0.011,0.008,0.01,0.005,0.003],
                '180':[0,0.044,0.201,0.279,0.139,0.097,0.075,0.058,0.034,0.026,0.021,0.015,0.011,0,0,0,0,0,0,0,0,0,0,0,0],
                '270':[0,0.038,0.091,0.168,0.242,0.125,0.06,0.059,0.047,0.032,0.027,0.022,0.019,0.016,0.013,0.012,0.011,0.01,0.008,0,0,0,0,0,0],
                '360':[0,0.127,0.323,0.214,0.083,0.067,0.05,0.039,0.03,0.024,0.019,0.014,0.01,0,0,0,0,0,0,0,0,0,0,0,0],
                '540':[0,0.092,0.295,0.182,0.072,0.041,0.059,0.045,0.037,0.032,0.027,0.024,0.018,0.021,0.015,0.013,0.01,0.009,0.008,0,0,0,0,0,0],
                '720':[0,0.105,0.287,0.117,0.07,0.043,0.033,0.022,0.06,0.033,0.029,0.026,0.019,0.023,0.021,0.017,0.015,0.013,0.012,0.011,0.01,0.01,0.007,0.01,0.007],
                '1080':[0,0.333,0.189,0.053,0.104,0.052,0.045,0.04,0.025,0.018,0.021,0.014,0.011,0.032,0.013,0.012,0.016,0.012,0.01,0,0,0,0,0,0],
                '1440':[0,0.302,0.165,0.075,0.056,0.037,0.029,0.031,0.018,0.013,0.011,0.012,0.009,0.005,0.006,0.01,0.017,0.014,0.015,0.022,0.027,0.024,0.037,0.045,0.02],
                '1800':[0,0.364,0.165,0.071,0.04,0.019,0.012,0.011,0.013,0.014,0.022,0.026,0.032,0.068,0.092,0.051,0,0,0,0,0,0,0,0,0],
                '2160':[0,0.338,0.148,0.051,0.045,0.025,0.011,0.011,0.012,0.012,0.016,0.022,0.019,0.044,0.071,0.096,0.035,0.03,0.014,0,0,0,0,0,0],
                '2880':[0,0.302,0.123,0.038,0.018,0.01,0.01,0.008,0.01,0.008,0.016,0.044,0.015,0.053,0.071,0.094,0.027,0.013,0.012,0.008,0.01,0.02,0.031,0.036,0.023],
                '4320':[0,0.326,0.102,0.012,0.01,0.01,0.032,0.094,0.07,0.014,0.011,0.017,0.042,0.132,0.054,0.012,0.015,0.027,0.02,0,0,0,0,0,0],
                }   
            pattern = np.array(ARR87_SMALL_PATTERNS_ZONE4[str(duration)])      
        elif str(zone) == '5':
            ARR87_SMALL_PATTERNS_ZONE5 = {        
                '5':[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '10':[0,0.57,0.43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '15':[0,0.32,0.5,0.18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '20':[0,0.19,0.43,0.3,0.08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '25':[0,0.17,0.28,0.39,0.09,0.07,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '30':[0,0.16,0.25,0.33,0.09,0.11,0.06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '45':[0,0.048,0.142,0.247,0.183,0.095,0.116,0.075,0.061,0.033,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '60':[0,0.039,0.07,0.168,0.12,0.232,0.101,0.089,0.057,0.048,0.031,0.026,0.019,0,0,0,0,0,0,0,0,0,0,0,0],
                '90':[0,0.073,0.131,0.22,0.107,0.089,0.06,0.051,0.044,0.038,0.029,0.033,0.023,0.017,0.013,0.015,0.027,0.02,0.01,0,0,0,0,0,0],
                '120':[0,0.026,0.066,0.132,0.169,0.103,0.079,0.058,0.049,0.046,0.04,0.036,0.032,0.028,0.021,0.023,0.015,0.014,0.018,0.011,0.008,0.01,0.007,0.005,0.004],
                '180':[0,0.085,0.3,0.199,0.13,0.07,0.056,0.045,0.036,0.028,0.022,0.017,0.012,0,0,0,0,0,0,0,0,0,0,0,0],
                '270':[0,0.056,0.237,0.164,0.118,0.084,0.037,0.046,0.07,0.034,0.025,0.022,0.029,0.02,0.017,0.014,0.011,0.009,0.007,0,0,0,0,0,0],
                '360':[0,0.11,0.331,0.192,0.084,0.071,0.055,0.043,0.034,0.023,0.028,0.016,0.013,0,0,0,0,0,0,0,0,0,0,0,0],
                '540':[0,0.143,0.306,0.088,0.072,0.063,0.054,0.048,0.041,0.036,0.019,0.016,0.026,0.024,0.032,0.01,0.008,0.008,0.006,0,0,0,0,0,0],
                '720':[0,0.12,0.281,0.079,0.045,0.071,0.048,0.044,0.039,0.034,0.03,0.023,0.026,0.016,0.021,0.013,0.018,0.011,0.012,0.019,0.01,0.01,0.01,0.01,0.01],
                '1080':[0,0.329,0.144,0.088,0.072,0.059,0.052,0.037,0.045,0.032,0.024,0.027,0.02,0.019,0.016,0.013,0.01,0.007,0.006,0,0,0,0,0,0],
                '1440':[0,0.313,0.139,0.033,0.105,0.06,0.048,0.043,0.034,0.029,0.021,0.024,0.019,0.016,0.015,0.011,0.007,0.013,0.013,0.011,0.007,0.009,0.01,0.01,0.01],
                '1800':[0,0.38,0.18,0.104,0.068,0.059,0.049,0.038,0.03,0.024,0.018,0.014,0.012,0.008,0.009,0.007,0,0,0,0,0,0,0,0,0],
                '2160':[0,0.359,0.159,0.088,0.071,0.053,0.043,0.038,0.03,0.02,0.024,0.016,0.015,0.015,0.015,0.014,0.014,0.013,0.013,0,0,0,0,0,0],
                '2880':[0,0.329,0.131,0.076,0.065,0.052,0.051,0.04,0.033,0.026,0.022,0.016,0.018,0.014,0.012,0.012,0.012,0.012,0.011,0.011,0.012,0.012,0.011,0.011,0.011],
                '4320':[0,0.401,0.138,0.087,0.066,0.06,0.043,0.031,0.02,0.025,0.017,0.015,0.014,0.014,0.014,0.014,0.014,0.014,0.013,0,0,0,0,0,0],
                }   
            pattern = np.array(ARR87_SMALL_PATTERNS_ZONE5[str(duration)])     
        elif str(zone) == '6':
            ARR87_SMALL_PATTERNS_ZONE6 = {        
                '5':[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '10':[0,0.57,0.43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '15':[0,0.32,0.5,0.18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '20':[0,0.19,0.43,0.3,0.08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '25':[0,0.17,0.28,0.39,0.09,0.07,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '30':[0,0.16,0.25,0.33,0.09,0.11,0.06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '45':[0,0.048,0.142,0.247,0.183,0.095,0.116,0.075,0.061,0.033,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '60':[0,0.039,0.07,0.168,0.12,0.232,0.101,0.089,0.057,0.048,0.031,0.026,0.019,0,0,0,0,0,0,0,0,0,0,0,0],
                '90':[0,0.032,0.035,0.052,0.072,0.195,0.088,0.111,0.144,0.06,0.028,0.04,0.046,0.024,0.011,0.014,0.021,0.018,0.007,0,0,0,0,0,0],
                '120':[0,0.017,0.124,0.163,0.058,0.035,0.099,0.069,0.084,0.051,0.028,0.032,0.04,0.045,0.026,0.019,0.023,0.013,0.021,0.015,0.011,0.009,0.008,0.006,0.004],
                '180':[0,0.061,0.272,0.182,0.126,0.095,0.075,0.05,0.042,0.034,0.028,0.021,0.014,0,0,0,0,0,0,0,0,0,0,0,0],
                '270':[0,0.018,0.149,0.216,0.052,0.11,0.087,0.071,0.039,0.045,0.06,0.034,0.022,0.029,0.025,0.015,0.012,0.009,0.007,0,0,0,0,0,0],
                '360':[0,0.042,0.078,0.272,0.174,0.125,0.098,0.064,0.052,0.035,0.027,0.02,0.013,0,0,0,0,0,0,0,0,0,0,0,0],
                '540':[0,0.061,0.258,0.047,0.16,0.109,0.083,0.047,0.039,0.027,0.019,0.037,0.014,0.023,0.032,0.011,0.016,0.01,0.007,0,0,0,0,0,0],
                '720':[0,0.074,0.234,0.027,0.148,0.101,0.059,0.044,0.046,0.038,0.029,0.025,0.017,0.022,0.033,0.019,0.015,0.013,0.012,0.009,0.01,0.007,0.006,0.007,0.005],
                '1080':[0,0.068,0.261,0.121,0.162,0.032,0.022,0.092,0.043,0.054,0.03,0.024,0.02,0.014,0.017,0.014,0.01,0.009,0.007,0,0,0,0,0,0],
                '1440':[0,0.113,0.241,0.088,0.152,0.054,0.068,0.043,0.038,0.036,0.03,0.021,0.018,0.025,0.015,0.008,0.013,0.011,0.007,0.005,0.004,0.004,0.001,0.002,0.003],
                '1800':[0,0.134,0.307,0.187,0.074,0.098,0.055,0.041,0.023,0.031,0.017,0.012,0.009,0.006,0.004,0.002,0,0,0,0,0,0,0,0,0],
                '2160':[0,0.122,0.294,0.179,0.09,0.064,0.041,0.054,0.035,0.027,0.022,0.017,0.013,0.009,0.011,0.006,0.008,0.005,0.003,0,0,0,0,0,0],
                '2880':[0,0.16,0.273,0.112,0.076,0.059,0.052,0.031,0.048,0.038,0.026,0.021,0.012,0.018,0.015,0.008,0.01,0.009,0.006,0.006,0.005,0.004,0.003,0.004,0.004],
                '4320':[0,0.184,0.339,0.122,0.081,0.061,0.039,0.051,0.03,0.017,0.023,0.008,0.013,0.01,0.005,0.006,0.002,0.006,0.003,0,0,0,0,0,0],
                }   
            pattern = np.array(ARR87_SMALL_PATTERNS_ZONE6[str(duration)])  
        elif str(zone) == '7':
            ARR87_SMALL_PATTERNS_ZONE7 = {        
                '5':[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '10':[0,0.57,0.43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '15':[0,0.32,0.5,0.18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '20':[0,0.19,0.43,0.3,0.08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '25':[0,0.17,0.28,0.39,0.09,0.07,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '30':[0,0.16,0.25,0.33,0.09,0.11,0.06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '45':[0,0.048,0.142,0.247,0.183,0.095,0.116,0.075,0.061,0.033,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '60':[0,0.039,0.07,0.168,0.12,0.232,0.101,0.089,0.057,0.048,0.031,0.026,0.019,0,0,0,0,0,0,0,0,0,0,0,0],
                '90':[0,0.055,0.142,0.179,0.113,0.058,0.099,0.074,0.031,0.036,0.047,0.041,0.027,0.017,0.012,0.02,0.016,0.024,0.009,0,0,0,0,0,0],
                '120':[0,0.038,0.125,0.164,0.084,0.045,0.061,0.098,0.043,0.04,0.035,0.034,0.028,0.03,0.025,0.009,0.013,0.021,0.018,0.011,0.016,0.019,0.023,0.014,0.006],
                '180':[0,0.032,0.186,0.268,0.129,0.094,0.062,0.026,0.049,0.078,0.04,0.021,0.015,0,0,0,0,0,0,0,0,0,0,0,0],
                '270':[0,0.046,0.158,0.239,0.096,0.07,0.056,0.05,0.044,0.038,0.033,0.028,0.029,0.024,0.022,0.019,0.018,0.016,0.014,0,0,0,0,0,0],
                '360':[0,0.079,0.295,0.124,0.186,0.08,0.031,0.02,0.026,0.047,0.059,0.039,0.014,0,0,0,0,0,0,0,0,0,0,0,0],
                '540':[0,0.036,0.255,0.098,0.045,0.023,0.035,0.141,0.07,0.09,0.055,0.027,0.022,0.024,0.012,0.017,0.015,0.02,0.015,0,0,0,0,0,0],
                '720':[0,0.032,0.238,0.149,0.036,0.019,0.009,0.027,0.047,0.114,0.082,0.061,0.026,0.023,0.021,0.016,0.018,0.012,0.013,0.015,0.009,0.008,0.011,0.009,0.005],
                '1080':[0,0.16,0.326,0.078,0.034,0.113,0.06,0.038,0.023,0.032,0.019,0.013,0.027,0.016,0.014,0.013,0.013,0.011,0.01,0,0,0,0,0,0],
                '1440':[0,0.147,0.312,0.056,0.095,0.066,0.051,0.041,0.018,0.022,0.034,0.016,0.008,0.003,0.012,0.025,0.014,0.011,0.003,0.004,0.01,0.007,0.013,0.029,0.003],
                '1800':[0,0.394,0.072,0.181,0.069,0.063,0.036,0.021,0.015,0.029,0.018,0.024,0.047,0.012,0.01,0.009,0,0,0,0,0,0,0,0,0],
                '2160':[0,0.386,0.061,0.17,0.068,0.045,0.037,0.021,0.049,0.03,0.019,0.016,0.025,0.015,0.013,0.012,0.011,0.011,0.011,0,0,0,0,0,0],
                '2880':[0,0.354,0.119,0.063,0.058,0.04,0.045,0.04,0.023,0.027,0.02,0.016,0.032,0.018,0.014,0.015,0.014,0.014,0.014,0.014,0.011,0.011,0.012,0.013,0.013],
                '4320':[0,0.41,0.128,0.081,0.052,0.074,0.042,0.032,0.018,0.015,0.015,0.015,0.025,0.021,0.016,0.016,0.013,0.013,0.014,0,0,0,0,0,0],
                }   
            pattern = np.array(ARR87_SMALL_PATTERNS_ZONE7[str(duration)])       
        elif str(zone) == '8':
            ARR87_SMALL_PATTERNS_ZONE8 = {        
                '5':[0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '10':[0,0.57,0.43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '15':[0,0.32,0.5,0.18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '20':[0,0.19,0.43,0.3,0.08,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '25':[0,0.17,0.28,0.39,0.09,0.07,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '30':[0,0.16,0.25,0.33,0.09,0.11,0.06,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '45':[0,0.048,0.142,0.247,0.183,0.095,0.116,0.075,0.061,0.033,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                '60':[0,0.039,0.07,0.168,0.12,0.232,0.101,0.089,0.057,0.048,0.031,0.026,0.019,0,0,0,0,0,0,0,0,0,0,0,0],
                '90':[0,0.055,0.187,0.138,0.111,0.074,0.064,0.091,0.024,0.036,0.041,0.031,0.027,0.048,0.015,0.012,0.02,0.018,0.008,0,0,0,0,0,0],
                '120':[0,0.012,0.17,0.124,0.082,0.058,0.067,0.099,0.05,0.021,0.018,0.031,0.028,0.017,0.013,0.023,0.026,0.039,0.035,0.044,0.015,0.01,0.008,0.006,0.004],
                '180':[0,0.128,0.292,0.183,0.049,0.06,0.094,0.074,0.039,0.024,0.03,0.017,0.01,0,0,0,0,0,0,0,0,0,0,0,0],
                '270':[0,0.066,0.227,0.113,0.088,0.144,0.035,0.025,0.05,0.06,0.035,0.027,0.009,0.012,0.018,0.022,0.047,0.015,0.007,0,0,0,0,0,0],
                '360':[0,0.091,0.183,0.042,0.306,0.129,0.064,0.043,0.053,0.033,0.023,0.019,0.014,0,0,0,0,0,0,0,0,0,0,0,0],
                '540':[0,0.148,0.092,0.293,0.046,0.072,0.062,0.05,0.044,0.038,0.023,0.019,0.015,0.031,0.01,0.013,0.027,0.009,0.008,0,0,0,0,0,0],
                '720':[0,0.138,0.27,0.085,0.043,0.067,0.055,0.042,0.049,0.037,0.016,0.018,0.014,0.031,0.027,0.023,0.02,0.012,0.009,0.004,0.011,0.01,0.007,0.007,0.005],
                '1080':[0,0.154,0.281,0.103,0.038,0.089,0.025,0.073,0.056,0.025,0.03,0.044,0.02,0.014,0.017,0.011,0.008,0.007,0.005,0,0,0,0,0,0],
                '1440':[0,0.139,0.264,0.087,0.071,0.046,0.07,0.037,0.056,0.031,0.036,0.026,0.022,0.019,0.016,0.014,0.012,0.01,0.006,0.009,0.003,0.005,0.009,0.005,0.007],
                '1800':[0,0.108,0.308,0.17,0.081,0.068,0.048,0.063,0.038,0.011,0.015,0.024,0.009,0.019,0.031,0.007,0,0,0,0,0,0,0,0,0],
                '2160':[0,0.152,0.105,0.289,0.074,0.061,0.055,0.039,0.048,0.017,0.01,0.02,0.025,0.036,0.029,0.011,0.007,0.014,0.008,0,0,0,0,0,0],
                '2880':[0,0.141,0.284,0.085,0.06,0.064,0.053,0.048,0.034,0.01,0.011,0.021,0.013,0.008,0.041,0.015,0.024,0.009,0.018,0.007,0.028,0.006,0.006,0.007,0.007],
                '4320':[0,0.331,0.167,0.105,0.078,0.054,0.069,0.027,0.043,0.013,0.017,0.021,0.003,0.007,0.005,0.006,0.034,0.011,0.009,0,0,0,0,0,0],
                }   
            pattern = np.array(ARR87_SMALL_PATTERNS_ZONE8[str(duration)])
        #---End if Zone
    #---End if > 30 yr
    if debug >0 :print ('OUT get_ARR1987_PATTERN...')
    return(pattern)
#-----------------------------------------------------------------------    
def create_IFD_1987_Table(Std_Freq_list,Std_Dur_list,ALL_IFD,Location,debug):
    """
    
    ALL_IFD[frq][dur]
    
    """
    if debug>0: print('In create_IFD_1987_Table......')
    ALL_IFD_D_F = [list(i) for i in zip(*ALL_IFD)]
    delimiter = ' '
    if debug > 1:
        print(Std_Freq_list,Std_Dur_list)
        print(len(ALL_IFD),len(ALL_IFD[0]))
        print(len(ALL_IFD_D_F),len(ALL_IFD_D_F[0]))
    print('-'*80)
    s1 = delimiter.join(["%7i" % (i) for i in zip(Std_Freq_list)])
    print('                  INTENSITY FREQUENCY DURATION TABLE')
    print('Add Location data:.....%s' %(Location))
    print('-'*80)
    s = '-'*25
    print('     <%s F R E Q U E N C Y %s>' %(s,s))
    print('-'*80)
    print('DUR:%s' %(s1))
    for dur in Std_Dur_list:
        d_indx = Std_Dur_list.index(dur)
        #print(ALL_IFD_D_F[d_indx])
        s2 = delimiter.join(["%7.2f" % (i) for i in zip(ALL_IFD_D_F[d_indx])])
        print(' %4i %s' %(dur,s2))
        #for dur in Std_Dur_list:
        #print(frq,dur,ALL_IFD[frq][dur])
    print('-'*80)
    if debug>0: print('OUT create_IFD_1987_Table......')
    return()
#-----------------------------------------------------------------------
def plot_IFD_1987_Graph(I87,Std_Freq_list,Std_Dur_list,ALL_IFD,Location,debug):
    """
    
    From the FULL IFD LIST Total IFD Table for all Durations
    [5,6,10,15,20,25,30,45,60,90,120,180,270,360,540,720,1080,1440,1800,2160,2880,4320], 1-500yr
    Make it print nicely
    Option to save to a file ??  
    
    """
    import matplotlib.pyplot as plt
    if debug > 0:print('In ....Plot_IFD_1987_Graph.....')
    DURCount =0
    Count = 0
    NUM_COLORS = 9
    LINE_STYLES = ['solid', 'dashed', 'dashdot']  #  ,'dotted'
    NUM_STYLES = len(LINE_STYLES)
    wm = plt.get_current_fig_manager()
     # Not Sure why some of these donot work ???
    #wm.frame.Maximize(True) # for QT only
    #wm.full_screen_toggle() #---- Works but cannot close window  ???
    #wm.resize(*wm.window.maxsize())
    #wm.window.state('zoomed')
    plt.rcParams['figure.facecolor']='w'
    cm = plt.get_cmap('gist_rainbow')
    for f in Std_Freq_list:
        lines = plt.plot(Std_Dur_list, ALL_IFD[Count], marker='o',linestyle='-', linewidth=1.5,label=f)
        lines[0].set_color(cm(Count//1*1.0/NUM_COLORS))
        #lines[0].set_color(cm(Count//3*3.0/NUM_COLORS))
        #lines[0].set_linestyle(LINE_STYLES[Count%NUM_STYLES])
        Count +=1
    plt.grid(True, which="both", c='gray',ls="--")
    headerline = '%s: I-F-D plot for %s' % (1987,Location)
    title = 'Location %s;' %(Location)
    plt.suptitle(headerline,fontsize=18)
    plt.title(title,fontsize=12)
    #plt.xlim(xmin, xmax)
    #plt.ylim(hmin, hmax)
    plt.xlabel('Event Duration (min)')
    plt.ylabel('Rainfall Intensity (mm/hr)')
    plt.legend()
    plt.yscale('log')
    plt.xscale('log')
    s1 = 'I02y01hr %.1fmm/hr, I02y12hr %.1fmm/hr, I02y72hr %.1fmm/hr\n' %(I87[0],I87[1],I87[2])
    s2 = 'I50y01hr %.1fmm/hr, I50y12hr %.1fmm/hr, I50y72hr %.1fmm/hr\n' % (I87[3],I87[4],I87[5])
    s3 = 'FreqF02y %.3f , FreqF50y %.3f, RegSkewG %.3f' %(I87[6],I87[7],I87[8])
    plt.text(5, 10.5, s1+s2+s3, fontsize=8,bbox = {'facecolor': 'oldlace', 'alpha': 0.5, 'pad': 8})
    plt.show()
    if debug >0:print('RETURN From ....Plot_IFD_1987_Graph.....')
    return()
#-----------------------------------------------------------------------
def plot_ARR1987_Pattern(ARF,AveInt,ARF_AveInt,TotRain,ATot,Tstep,ori_pattern,impv_pattern,perv_pattern,frq,dur,Pattzone,Location,debug):
    """
    This Plots the Original Rainfall Pattern and the Adjusted Pattern with ARF
    
    """
    import matplotlib.pyplot as plt
    import numpy as np
    if debug >0:print('IN ....Plot_ARR1987_Pattern.....')
    #runoff = np.array([1,4,5,6,7,8,9]) 
    #precipitation = np.array([4,5,6,7,3,3,7])
    fig, ax = plt.subplots()
    # x axis to plot both runoff and precip. against
    x = []
    i = 0
    for i,r in enumerate(ori_pattern):
        x.append(i*Tstep)
    #x = np.linspace(0, 10, len(runoff))
    print(len(x),len(ori_pattern))
    print(x)
    cum_oriR = np.cumsum(ori_pattern) 
    cum_impR = np.cumsum(impv_pattern) 
    cum_perR = np.cumsum(perv_pattern) 
    impv_pattern = np.array(impv_pattern)*-1.0
    perv_pattern = np.array(perv_pattern)*-1.0
    ax.bar(x, -ori_pattern,Tstep,edgecolor='cyan',   color='None',label = 'All Rain')
    ax.bar(x, impv_pattern,Tstep-2,edgecolor='gray' ,color='None',label = 'Imp Rain')
    ax.bar(x, perv_pattern,Tstep-3,edgecolor='green',color='green',label = 'Per Rain')
    # Create second axes, in order to get the bars from the top you can multiply 
    # by -1
    ax2 = ax.twinx()
    ax2.plot(x, cum_oriR, color="red",label = 'Accum. All')
    ax2.plot(x, cum_impR, color="gray",label = 'Accum. Imp')
    ax2.plot(x, cum_perR, color="green",label = 'Accum. Per')
    ax2.yaxis.label.set_color('red')
    ax2.set_ylabel('Total Rain mm')
    ax2.tick_params(axis='y', colors='red')
    ax.set_xlabel('Time Steps (min)')
    
    # Now need to fix the axis labels
    max_pre = int(max(ori_pattern))
    y_ticks = np.linspace(0, max_pre, max_pre+1)
    y_ticklabels = [str(i) for i in y_ticks]
    ax.set_yticks(-1 * y_ticks)
    ax.set_yticklabels(y_ticklabels)
    ax.tick_params(axis='y', colors='green')
    ax.set_ylabel('Rainfall mm')
    ax.yaxis.label.set_color('green')
    headerline = '%s: Rainfall Pattern & Accumulation plot for %iyr %imin Zone %i' % ('ARR1987',frq,dur,Pattzone)
    title = 'Location %s; Area %.1fSqkm ARF: %.3f Pt.Int %.2fmm/hr AreaInt %.2fmm/hr Tot Rain: %.1fmm' %(Location,ATot,ARF,AveInt,ARF_AveInt,TotRain)
    plt.suptitle(headerline,fontsize=18)
    plt.title(title,fontsize=12)
    plt.grid(True, which="both", c='gray',ls="--")
    #aliases = ["All Rain","Imp Rain","Per Rain"]
    #handles = ax[2].get_lines() + ax[1].containers
    #fig.legend(handles, aliases, loc='lower left', ncol=len(aliases),  fontsize=10, bbox_to_anchor=(0.5, 1))
    ax.legend(loc = 'lower right') # Bar Plots
    plt.legend(loc = 'center right') # Line Plot
    #plt.legend(aliases,loc=4,fontsize = 8)
    
    plt.show()
    if debug >0:print('OUT ....Plot_ARR1987_Pattern.....')
    return()
#-----------------------------------------------------------------------    
def get_32Basic1987_IFD(I87,debug):
    """
    This routine will get a list of lists of Basic 6m,60m,720m 4320m 1-500 year Intensities
    from Standard IFD data being
    I02y01hr,I02y12hr,I02y72hr,I50y01hr,I50y12hr,I50y72hr,FreqF02y,FreqF50y,RegSkewG
    
    Eg:  I87 = [41.40,9.00,2.85,85.50,18.50,6.60,4.28,15.80,0.00]
    
    
    """
    if debug>0: print('IN get_32Basic1987_IFD ....')
    # Get data into more readable form
    I02y01hr = I87[0]
    I02y12hr = I87[1]
    I02y72hr = I87[2]
    I50y01hr = I87[3]
    I50y12hr = I87[4]
    I50y72hr = I87[5]
    FreqF02y = I87[6]
    FreqF50y = I87[7]
    RegSkewG = I87[8]
    
    #     Frequency Factors Ky for LP3 and positive skew
    #     Refer ARR table 10.2
    #
    #     For regional skew of zero (or near to zero)
    Freq_list = [2,5,10,20,50,100,200,500]
    K_basic = [0.0000,0.8416,1.2816,1.6449,2.0537,2.3263,2.5760,2.8780]
    PowFact = [1.1300,1.0500,1.0000,1.0000,1.0000,1.0000,1.0000,1.0000]
    # Determine the appropriate K factor if Skewness is applied
    if RegSkewG <= 0.001:
        K_2_500 = K_basic
    else: #   For regional skew greater than zero
        K_2_500 = []
        for i in [0,1,2,3,4,5,6,7]:
            K_2_500.append((((K_basic - RegSkewG / 6.0) * (RegSkewG / 6.0) + 1.0) ** 3.0 - 1.0) * 2.0 / RegSkewG)
            # = (((2.8780 - G / 6) * (G / 6) + 1) ** 3 - 1) * 2 / G
    # Get Basic 6m Intensities for 2 basic Frequencies
    r026m = FreqF02y * I02y01hr ** 0.9
    r506m = FreqF50y * I50y01hr ** 0.6
    # Create Basic List of 4 Intensities for 4 Durations and 2 Frequencies
    Int02yr = [r026m, I02y01hr, I02y12hr,I02y72hr]
    Int50yr = [r506m,I50y01hr,I50y12hr,I50y72hr]
    Int01yr = []
    # Create Duration Factors for  Basic Intensities for Application to Algorithm 
    # And Create 1 year Basic Intensities
    d_list = [6,60,720,4320]
    X_fact = []
    S_fact = []
    if debug > 0: print('Calculating X & S...')
    for t in [0,1,2,3]:
        X = 0.43429 * math.log(Int02yr[t]/ 1.13)
        S = 0.43429 * 0.4869 * math.log(1.13 * Int50yr[t] / Int02yr[t])
        if debug > 1:print(d_list[t], Int02yr[t],Int50yr[t],X,S)
        X_fact.append(X)
        S_fact.append(S)
        #----  Create 1 Year Intensities from Basic Intensity Inputs
        I1 = 0.885 * Int02yr[t]/ (1 + .4329 * .4046 *math.log(1.13*Int50yr[t]/Int02yr[t]))
        Int01yr.append(I1)
    # Now Have 4 Basic Durations for 3 Frequencies (1yr, 2yr and 50yr)
    if debug > 1:
        print('01 year Basic Intensities:')
        print(Int01yr)
        print('02 year Basic Intensities:')
        print(Int02yr)
        print('50 year Basic Intensities:')
        print(Int50yr)
        print('Factors Used in Calcs.')
        print(PowFact)
        print(X_fact)
        print(S_fact)
        print(K_2_500)
    B_IFD_1_500 = []
    # Now have List of Duration K factors and Basic Duration X & S factors
    # For BAsic Durations 6m 60m 720m 4320m get 2- 500year Intensties (32 Basic Intensities
    for xs in [0,1,2,3]:   # Step THrough X_fact and S_fact 6m, 60m 720m 4320m Durations
        DurFreq = []
        DurFreq.append(Int01yr[xs]) # Add 1 year ARI to start of List before
        for k in [0,1,2,3,4,5,6,7]:# Step through K_2_500 Frequencies 
            RaisedTo = (X_fact[xs]+ K_2_500[k]*S_fact[xs])
            Intensity = PowFact[k]*10**RaisedTo
            if debug > 1:
                print('%i DUR: %i Frequency Factors used:' %(d_list[xs],Freq_list[k]))
                print(PowFact[k],X_fact[xs],K_2_500[k],S_fact[xs],RaisedTo,10**RaisedTo)
                print(Intensity)
            if debug > 2:input('Chk Int...')
            DurFreq.append(Intensity) # This is list of Basic 1-500yr : 6m, 60m, 720m, 4320m Intensities
        B_IFD_1_500.append(DurFreq)
        #--- End For xs Durations
    # --- End for k Frequencies
    if debug > 1:
        print('ALL 32 BASIC Intensities 1-500yr : 6m, 60m, 720m, 4320m')
        print(B_IFD_1_500)
        print('='*80)
        input('Check all....')
    if debug>0: print('OUT get_32Basic1987_IFD ....')
    return(B_IFD_1_500)

#-----------------------------------------------------------------------

def get198IFD_1987(I87,debug):
    """
    From the Basic IFD data 
    Develop the Total IFD Table for all Durations
    [5,6,10,15,20,25,30,45,60,90,120,180,270,360,540,720,1080,1440,1800,2160,2880,4320]
    
    
    """
    if debug>0: print('IN get198IFD_1987 ....')
    B_IFD_1_500 = get_32Basic1987_IFD(I87,debug)#----- First get 6m,60m,720m,4320m 1-500yr here
    #---- Select the required basic intensities for the given ARI
    #----  and compute AVINTEN for DURA specified
    #===== Compute intensity for all DURA and ARI
    Std_Dur_list = [5,6,10,15,20,25,30,45,60,90,120,180,270,360,540,720,1080,1440,1800,2160,2880,4320] # 22 Durations
    Dur_Pwr = [-0.058,0.0,0.181,0.343,0.467,0.568,0.654,0.853,0.000, 0.159,0.274,0.438,0.603,0.720,0.884,0.000,0.213,0.365,0.486,0.587,0.751,0.00000]
    Std_Freq_list = [1,2,5,10,20,50,100,200,500] # 9 Frequencies
    #===== Interpolate for Inten between 5min and 60 min
    #===== Interpolate for inten between 1 and 12 hr duration
    #===== Interpolate for inten between 12hrs and 72 hrs
    # =========   For ARI & DURATION:
    # Data is Stored as INT[Dur][Freq]
    cd_list = [6,60,720,4320]  #  4 Durations
    ALL_IFD = []
    for frq in Std_Freq_list:
        DUR_int = []
        frq_indx = Std_Freq_list.index(frq)
        for dur in Std_Dur_list:#---- 22 Durations
            if dur in cd_list:
                cd_indx = cd_list.index(dur) # Already have this calculated in list
                AveInt = B_IFD_1_500[cd_indx][frq_indx]
                if debug > 1:print(cd_indx,frq_indx,B_IFD_1_500[cd_indx][frq_indx])
            else:
                d_indx = Std_Dur_list.index(dur)
                if dur in [5,6,10,15,20,25,30,45]:
                    cd_indx = 0
                elif dur in [60,90,120,180,270,360,540]:
                    cd_indx = 1
                else:
                    cd_indx = 2
                if debug > 3:print(cd_indx,frq_indx,B_IFD_1_500[cd_indx][frq_indx],B_IFD_1_500[cd_indx+1][frq_indx])
                AveInt = B_IFD_1_500[cd_indx][frq_indx]*( B_IFD_1_500[cd_indx+1][frq_indx]/ B_IFD_1_500[cd_indx][frq_indx])**Dur_Pwr[d_indx]
            DUR_int.append(AveInt)
            if debug > 2:
                print('%i,%i  ::  %.2f' %(frq, dur,AveInt))
                input('Check Durs...')
        ALL_IFD.append(DUR_int)
    if debug > 1:
        print(ALL_IFD)
        input('Chk ALL IFD...')
    if debug>0: print('OUT get198IFD_1987 ....')
    # Got the design point AVINTEN from PMP/DES
    return(Std_Freq_list,Std_Dur_list,ALL_IFD)
#-----------------------------------------------------------------------
def get_singleIFD_1987_Value(I87,ArfZone,frq,dur,ATot,debug):
    """
    Get a specific IFD Value for Frequency & Duration Specified
    From the Basic IFD data I87
    Develop 6m,60m,720m,4320m 1-500yr
    From which any other Duration is able to be determined here:
    """
    import py_get_ARR_1987_ARF_params
    
    Std_Freq_list = [1,2,5,10,20,50,100,200,500] # 9 Frequences
    Std_Dur_list = [5,6,10,15,20,25,30,45,60,90,120,180,270,360,540,720,1080,1440,1800,2160,2880,4320] # 22 Durations
    if frq not in Std_Freq_list or dur not in Std_Dur_list:
        print('PLEASE CHEQ Frequency or Duration, what you supplied is not standard')
        print('Supplied: %i,Freq, %i, Dur:' %(frq,dur))
        print('Standard Frequency...:')
        print(Std_Freq_list)
        print('Standard Durations:')
        print(Std_Dur_list)
        AveInt = 0.0
        input('Chk durs...')
    else:
        #--- First get Basic Intensities for 6m,60m, 720m, 4320m 1-500 year
        B_IFD_1_500 = get_32Basic1987_IFD(I87,debug)
        # =========   For ARI & DURATION:
        # Data is Stored as INT[Dur][Freq]
        Dur_Pwr = [-0.058,0.0,0.181,0.343,0.467,0.568,0.654,0.853,0.000, 0.159,0.274,0.438,0.603,0.720,0.884,0.000,0.213,0.365,0.486,0.587,0.751,0.00000]
        cd_list = [6,60,720,4320]
        frq_indx = Std_Freq_list.index(frq)
        if dur in cd_list:
            cd_indx = cd_list.index(dur) # Already have this calculated in list
            AveInt = B_IFD_1_500[cd_indx][frq_indx]
            if debug > 1:print(cd_indx,frq_indx,B_IFD_1_500[cd_indx][frq_indx])
        else:
            d_indx = Std_Dur_list.index(dur)
            if dur in [5,6,10,15,20,25,30,45]:
               cd_indx = 0
            elif dur in [60,90,120,180,270,360,540]:
               cd_indx = 1
            else:
               cd_indx = 2
            if debug > 1:print(cd_indx,frq_indx,B_IFD_1_500[cd_indx][frq_indx],B_IFD_1_500[cd_indx+1][frq_indx])
            AveInt = B_IFD_1_500[cd_indx][frq_indx]*( B_IFD_1_500[cd_indx+1][frq_indx]/ B_IFD_1_500[cd_indx][frq_indx])**Dur_Pwr[d_indx]
        # Now Get Areal Reduction Factor ARF for Catchment Based on Zone,Duration and Area Total in Sqkm
        Params = py_get_ARR_1987_ARF_params.getARR1987_ARF_Params(ArfZone,frq,dur,debug)  
        ARF = py_get_ARR_1987_ARF_params.getARR1987_ARF_from_Params(ATot,Params,debug)
        print(ARF)  
        ARF_AveInt = ARF * AveInt
        TotRain = dur/60.0*ARF_AveInt
        print('Freq: %iyr Dur: %imins  RawI  %.2fmm/hr ARF %.3f I= %.2fmm/hr Total Rain %.2fmm' %(frq, dur,AveInt,ARF,ARF_AveInt,TotRain))
    # Got the design point AVINTEN from PMP/DES    
    return(ARF,AveInt,ARF_AveInt,TotRain)
#-----------------------------------------------------------------------
def remove_rainfall_il_cl_loss(dur,pattern,TotRain,imp,il,perv_cl,imp_cl,debug):
    """
    Could easily add Impervious CL ??
    
    
    """
    if debug > 0 : print('In remove_rainfall_il_cl_loss....')
    if debug > 1 : print('For Total Rain %.2fmm: For Catchment %.2f Impervious; remove Initial Loss of %.2fmm and Continuing Loss at %.2fmm/hr' %(TotRain,imp,il,perv_cl))
    Std_Dur_list = [5,6,10,15,20,25,30,45,60,90,120,180,270,360,540,720,1080,1440,1800,2160,2880,4320] # 22 Durations
    Dur_TS_list =  [5,6, 5, 5, 5, 5, 5, 5, 5, 5,  5, 15, 15, 30, 30, 30,  60,  60, 120, 120, 120, 240]
    Tstep = Dur_TS_list[Std_Dur_list.index(dur)]
    pcl_TS = perv_cl/60.0*Tstep
    icl_TS = imp_cl/60.0*Tstep
    delimiter = ' '
    if debug > 1 :print('Continuing Loss per %imin time period %.3fmm' %(Tstep,pcl_TS))
    ori_pattern = pattern*TotRain
    if debug > 1 :
        s2 = delimiter.join(["%7.2f" % (i) for i in zip(ori_pattern)])
        print(' %4i %s' %(dur,s2))
    #------------- REMOVE Initial Loss & Continuing Loss for Pervious Surfaces
    perv_pattern = []
    impv_pattern = []
    for r in ori_pattern:
        #----- Deal With Pervious here
        if debug >2:print(r,il,pcl_TS)
        if il > r:
            il = il-r
            nrp = 0.0
        elif il <= r:
            # check if it is less than continuing loss and adjust il to account for cl rate
            if pcl_TS > il:
                il = pcl_TS # Check that this is correct, else can add cl: il = il + cl_TS  ?????? CONFIRM FIRST !!!!
            nrp = r - il
            il = 0.0
        elif il == 0.0 and r > pcl_TS : # Now adjust remaining for Continuing loss
            if r == 0.0:
                nrp = 0.0
            else:
                nrp = r - pcl_TS
        elif r <= pcl_TS or r < 0.0001:
            nrp = 0.0
        if nrp < 0.0:
            nrp = 0.0
        perv_pattern.append(nrp)
        if debug >2:print(nrp)
        #---Deal with Impervious here
        if r > icl_TS:
            nri = r - icl_TS
        elif r <= icl_TS:
            nri = 0.0
        impv_pattern.append(nri)
    if debug > 1 :
        s2 = delimiter.join(["%7.2f" % (i) for i in zip(impv_pattern)])
        print(' %4i %s' %(dur,s2))
        s2 = delimiter.join(["%7.2f" % (i) for i in zip(perv_pattern)])
        print(' %4i %s' %(dur,s2))
        print('RAINFALL TOTALS:')
        print('%.3fmm  %.3fmm  %.3fmm  ' %(sum(ori_pattern),sum(impv_pattern),sum(perv_pattern)))
    if debug > 0 : print('OUT remove_rainfall_il_cl_loss....')
    
    #----- Convert from mm per period to mm/hour ??
    
    return(ori_pattern,impv_pattern,perv_pattern,Tstep)
#-----------------------------------------------------------------------   
def get_one_event_patternIFD_1987(I87,ArfZone,frq,dur,ATot,imp,il,pcl,icl,debug):
    """
    This routine gets a Single IFD vale and appropriate Frq-Dur Rainfall Excess Pattern 
    
    
    """
    if debug > 0 : print(' IN get_one_event_patternIFD_1987...')
    #---------------- THESE ROUTINES CAN BE CALLED -------------------------
    Std_Freq_list,Std_Dur_list,ALL_IFD = get198IFD_1987(I87,debug)
    # Here is call to get a single Value:
    ARF,AveInt,ARF_AveInt,TotRain = get_singleIFD_1987_Value(I87,ArfZone,frq,dur,ATot,debug)
    pattern = get_ARR1987_PATTERN(frq,dur,Pattzone,debug)
    # Now get rainfall amounts for Original Pattern Impervious and Pervious
    # Plot Pattern that fell from the SKY !!! Original without Losses...?? or ARF ???
    ori_pattern,impv_pattern,perv_pattern,Tstep = remove_rainfall_il_cl_loss(dur,pattern,TotRain,imp,il,pcl,icl,debug)
    if debug > 0 : print('OUT get_one_event_patternIFD_1987...')
    return(ori_pattern,impv_pattern,perv_pattern)
#-----------------------------------------------------------------------    
def get_IFD_PLOT1987():
    """
    get the ARR 1987 IFD Plot only
    """
    #---------------- THESE ROUTINES CAN BE CALLED -------------------------
    if debug > 0 : print(' IN get_IFD_PLOT1987...')
    Std_Freq_list,Std_Dur_list,ALL_IFD = get198IFD_1987(I87,debug)# 9 Freq for 22 Durations
    #--- ALL_IFD is a list of list INT[Dur][Freq]
    # Or Plot the IFD Graph ..... add real event ???
    plot_IFD_1987_Graph(I87,Std_Freq_list,Std_Dur_list,ALL_IFD,Location,debug)
    if debug > 0 : print('OUT get_IFD_PLOT1987...')
    return()
#-----------------------------------------------------------------------    
def ARR1987_Manager(LocationName,I87,frq,dur,Pattzone,ArfZone,il,pcl,icl,imp,ATot,Plot,Table,getpattern,plotpattern,debug):
    """
    
    
    """
    if debug >0: print('IN ARR1987_Manager....')
    Std_Freq_list,Std_Dur_list,ALL_IFD = get198IFD_1987(I87,debug)# 9 Freq for 22 Durations
    #---------------- THESE ROUTINES CAN BE CALLED -------------------------
    
    #--- ALL_IFD is a list of list INT[Dur][Freq]
    # Can now create a table (Save to file ??)
    if Table: create_IFD_1987_Table(Std_Freq_list,Std_Dur_list,ALL_IFD,LocationName,debug)
    # Or Plot the IFD Graph ..... add real event ???
    if Plot: plot_IFD_1987_Graph(I87,Std_Freq_list,Std_Dur_list,ALL_IFD,LocationName,debug)
    # Here is call to get a single Value:
    if not dur == None and not frq == None: ARF,AveInt,ARF_AveInt,TotRain = get_singleIFD_1987_Value(I87,ArfZone,frq,dur,ATot,debug)
    # get the raw Pattern as Proportions of Total Rain
    if getpattern: 
        pattern = get_ARR1987_PATTERN(frq,dur,Pattzone,debug)
        # Now get rainfall amounts for Original Pattern Impervious and Pervious
        # Plot Pattern that fell from the SKY !!! Original without Losses...?? or ARF ???
        ori_pattern,impv_pattern,perv_pattern,Tstep = remove_rainfall_il_cl_loss(dur,pattern,TotRain,imp,il,pcl,icl,debug)
        #----PLOT The patterns......
        if plotpattern:
            plot_ARR1987_Pattern(ARF,AveInt,ARF_AveInt,TotRain,ATot,Tstep,ori_pattern,impv_pattern,perv_pattern,frq,dur,Pattzone,LocationName,debug)
    if debug >0: print('OUT ARR1987_Manager....')
    return()
#-----------------------------------------------------------------------
def test_ARR1987_Manager():
    """
    Test module to create 1987 IFD
    - Table
    - Plot
    - A single Value
    - 
    
    """
    # PYTHON VERSION of IFD1987 From WBNM
    # Get Basic Data I02y01hr,I02y12hr,I02y72hr,I50y01hr,I50y12hr,I50y72hr,FreqF02y,FreqF50y,RegSkewG
    debug = 1
    PattZone = 1    
    ArfZone = 1
    LocationName = 'Somewhere in Wollongong'
    I87 = [41.40,9.00,2.85,85.50,18.50,6.60,4.28,15.80,0.00]
    frq = 500
    dur =60
    il = 10.	    	
    pcl = 2.5  			
    icl = 1.5
    imp = 0.5			
    ATot = 238 # Total Area in sqkm ?
    #-------------------------------------------------------------------
    Plot = True
    Table = True
    getpattern = True
    plotpattern = True
    #-------------------------------------------------------------------
    ARR1987_Manager(LocationName,I87,frq,dur,PattZone,ArfZone,il,pcl,icl,imp,ATot,Plot,Table,getpattern,plotpattern,debug)
    return()
#-----------------------------------------------------------------------    
#=======================================================================
#       MAIN LINE CODE
#=======================================================================
test_ARR1987_Manager()
#-------------------------- END ALL CODE -------------------------------
